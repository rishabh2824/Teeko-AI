{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\risha\\\\PycharmProjects\\\\hw9\\\\myteekoai\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Board from './components/board';\nimport Controls from './components/controls';\nimport { getGameState, aiMove, opponentMove, resetGame } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState('');\n  const [gameStatus, setGameStatus] = useState('');\n  const [selectedCell, setSelectedCell] = useState(null);\n\n  // Fetch initial game state\n  const fetchGameState = async () => {\n    try {\n      console.log('Fetching game state...');\n      const data = await getGameState();\n      console.log('Game state fetched:', data);\n      setBoard(data.board);\n      setTurn(data.turn); // \"AI\" or \"Opponent\"\n      setGameStatus(data.game_status); // \"ongoing\" or \"over\"\n    } catch (error) {\n      console.error('Error fetching game state:', error);\n      alert('Failed to fetch game state. Please try again.');\n    }\n  };\n  useEffect(() => {\n    fetchGameState();\n  }, []);\n  const handleCellClick = async (row, col) => {\n    if (gameStatus === 'over') {\n      alert('Game is over. Please reset to start a new game.');\n      return;\n    }\n    if (turn !== 'Opponent') {\n      alert('It is not your turn!');\n      return;\n    }\n    if (!selectedCell) {\n      console.log(`Cell selected at row: ${row}, col: ${col}`);\n      setSelectedCell([row, col]);\n    } else {\n      try {\n        const move = [selectedCell, [row, col]];\n        console.log('Sending opponent move:', move);\n        const data = await opponentMove(move); // Send opponent move via API\n        console.log('Opponent move result:', data);\n\n        // Update state with the data returned by the API\n        setBoard(data.board);\n        setGameStatus(data.game_status);\n        setTurn(data.turn);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Error with opponent move:', error);\n        alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Error making move. Please try again.');\n      } finally {\n        setSelectedCell(null);\n      }\n    }\n  };\n  const handleAIMove = async () => {\n    if (gameStatus === 'over') {\n      alert('Game is over. Please reset to start a new game.');\n      return;\n    }\n    if (turn !== 'AI') {\n      alert('It is not AI\\'s turn!');\n      return;\n    }\n    try {\n      console.log('Requesting AI move...');\n      const data = await aiMove(); // Make AI move via API\n      console.log('AI move result:', data);\n\n      // Update state with the data returned by the API\n      setBoard(data.board);\n      setGameStatus(data.game_status);\n      setTurn(data.turn);\n    } catch (error) {\n      console.error('Error with AI move:', error);\n      alert('Failed to process AI move. Please try again.');\n    }\n  };\n  const handleReset = async () => {\n    try {\n      console.log('Resetting game...');\n      await resetGame();\n      setSelectedCell(null); // Clear selected cell\n      fetchGameState(); // Fetch initial state after reset\n    } catch (error) {\n      console.error('Error resetting game:', error);\n      alert('Failed to reset game. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teeko Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Turn: \", turn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Status: \", gameStatus === 'over' ? 'Game Over' : 'In Progress']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      onCellClick: handleCellClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      onAIMove: handleAIMove,\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"QEZik0ycTJ+go6RMT/FDrkk6Wjc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Board","Controls","getGameState","aiMove","opponentMove","resetGame","jsxDEV","_jsxDEV","App","_s","board","setBoard","turn","setTurn","gameStatus","setGameStatus","selectedCell","setSelectedCell","fetchGameState","console","log","data","game_status","error","alert","handleCellClick","row","col","move","_error$response","_error$response$data","response","detail","handleAIMove","handleReset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCellClick","onAIMove","onReset","_c","$RefreshReg$"],"sources":["C:/Users/risha/PycharmProjects/hw9/myteekoai/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Board from './components/board';\nimport Controls from './components/controls';\nimport { getGameState, aiMove, opponentMove, resetGame } from './api';\n\nconst App = () => {\n    const [board, setBoard] = useState([]);\n    const [turn, setTurn] = useState('');\n    const [gameStatus, setGameStatus] = useState('');\n    const [selectedCell, setSelectedCell] = useState(null);\n\n    // Fetch initial game state\n    const fetchGameState = async () => {\n        try {\n            console.log('Fetching game state...');\n            const data = await getGameState();\n            console.log('Game state fetched:', data);\n            setBoard(data.board);\n            setTurn(data.turn); // \"AI\" or \"Opponent\"\n            setGameStatus(data.game_status); // \"ongoing\" or \"over\"\n        } catch (error) {\n            console.error('Error fetching game state:', error);\n            alert('Failed to fetch game state. Please try again.');\n        }\n    };\n\n    useEffect(() => {\n        fetchGameState();\n    }, []);\n\n    const handleCellClick = async (row, col) => {\n        if (gameStatus === 'over') {\n            alert('Game is over. Please reset to start a new game.');\n            return;\n        }\n\n        if (turn !== 'Opponent') {\n            alert('It is not your turn!');\n            return;\n        }\n\n        if (!selectedCell) {\n            console.log(`Cell selected at row: ${row}, col: ${col}`);\n            setSelectedCell([row, col]);\n        } else {\n            try {\n                const move = [selectedCell, [row, col]];\n                console.log('Sending opponent move:', move);\n                const data = await opponentMove(move); // Send opponent move via API\n                console.log('Opponent move result:', data);\n\n                // Update state with the data returned by the API\n                setBoard(data.board);\n                setGameStatus(data.game_status);\n                setTurn(data.turn);\n            } catch (error) {\n                console.error('Error with opponent move:', error);\n                alert(error.response?.data?.detail || 'Error making move. Please try again.');\n            } finally {\n                setSelectedCell(null);\n            }\n        }\n    };\n\n    const handleAIMove = async () => {\n        if (gameStatus === 'over') {\n            alert('Game is over. Please reset to start a new game.');\n            return;\n        }\n\n        if (turn !== 'AI') {\n            alert('It is not AI\\'s turn!');\n            return;\n        }\n\n        try {\n            console.log('Requesting AI move...');\n            const data = await aiMove(); // Make AI move via API\n            console.log('AI move result:', data);\n\n            // Update state with the data returned by the API\n            setBoard(data.board);\n            setGameStatus(data.game_status);\n            setTurn(data.turn);\n        } catch (error) {\n            console.error('Error with AI move:', error);\n            alert('Failed to process AI move. Please try again.');\n        }\n    };\n\n    const handleReset = async () => {\n        try {\n            console.log('Resetting game...');\n            await resetGame();\n            setSelectedCell(null); // Clear selected cell\n            fetchGameState(); // Fetch initial state after reset\n        } catch (error) {\n            console.error('Error resetting game:', error);\n            alert('Failed to reset game. Please try again.');\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Teeko Game</h1>\n            <h2>Turn: {turn}</h2>\n            <h3>Status: {gameStatus === 'over' ? 'Game Over' : 'In Progress'}</h3>\n            <Board board={board} onCellClick={handleCellClick} />\n            <Controls onAIMove={handleAIMove} onReset={handleReset} />\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}