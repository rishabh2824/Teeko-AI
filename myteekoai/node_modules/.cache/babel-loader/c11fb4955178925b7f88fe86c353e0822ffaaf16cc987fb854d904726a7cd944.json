{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\risha\\\\PycharmProjects\\\\hw9\\\\myteekoai\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Board from './components/board';\nimport Controls from './components/controls';\nimport { getGameState, aiMove, opponentMove, resetGame } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState('');\n  const [gameStatus, setGameStatus] = useState('');\n  const [selectedCell, setSelectedCell] = useState(null);\n  const fetchGameState = async () => {\n    try {\n      const data = await getGameState();\n      setBoard(data.board);\n      setTurn(data.turn || \"Opponent\");\n      setGameStatus(data.game_status);\n      setSelectedCell(null);\n      console.log('Fetched turn:', data.turn);\n    } catch (error) {\n      console.error('Error fetching game state:', error);\n      alert('Failed to fetch game state.');\n    }\n  };\n  useEffect(() => {\n    fetchGameState();\n  }, []);\n  const handleCellClick = async (row, col) => {\n    if (gameStatus === 'over') {\n      alert('Game is over.');\n      return;\n    }\n    if (turn !== 'Opponent') {\n      alert(\"It's AI's turn!\");\n      return;\n    }\n    const totalPieces = board.flat().filter(cell => cell !== '').length;\n    const dropPhase = totalPieces < 8;\n    if (dropPhase) {\n      const move = [[row, col]];\n      try {\n        console.log('Sending opponent drop move:', move);\n        const data = await opponentMove(move);\n        setBoard(data.board);\n        setGameStatus(data.game_status);\n        setTurn(data.turn);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Error with drop move:', error);\n        alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Invalid move.');\n      }\n    } else {\n      if (!selectedCell) {\n        setSelectedCell([row, col]);\n      } else {\n        const move = [selectedCell, [row, col]];\n        try {\n          console.log('Sending opponent move:', move);\n          const data = await opponentMove(move);\n          setBoard(data.board);\n          setGameStatus(data.game_status);\n          setTurn(data.turn);\n        } catch (error) {\n          var _error$response2, _error$response2$data;\n          console.error('Error with move:', error);\n          alert(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Invalid move.');\n        } finally {\n          setSelectedCell(null);\n        }\n      }\n    }\n  };\n  const handleAIMove = async () => {\n    if (gameStatus === 'over') {\n      alert('Game is over.');\n      return;\n    }\n    if (turn !== 'AI') {\n      alert(\"It's not AI's turn!\");\n      return;\n    }\n    try {\n      const data = await aiMove();\n      setBoard(data.board);\n      setGameStatus(data.game_status);\n      setTurn(data.turn);\n      console.log('Turn after AI move:', data.turn);\n    } catch (error) {\n      console.error('Error with AI move:', error);\n      alert('Failed to process AI move.');\n    }\n  };\n  const handleReset = async () => {\n    try {\n      await resetGame();\n      fetchGameState();\n    } catch (error) {\n      console.error('Error resetting game:', error);\n      alert('Failed to reset game.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teeko Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Turn: \", turn ? turn : 'Loading...']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Status: \", gameStatus === 'over' ? 'Game Over' : 'In Progress']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      onCellClick: handleCellClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      onAIMove: handleAIMove,\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"QEZik0ycTJ+go6RMT/FDrkk6Wjc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Board","Controls","getGameState","aiMove","opponentMove","resetGame","jsxDEV","_jsxDEV","App","_s","board","setBoard","turn","setTurn","gameStatus","setGameStatus","selectedCell","setSelectedCell","fetchGameState","data","game_status","console","log","error","alert","handleCellClick","row","col","totalPieces","flat","filter","cell","length","dropPhase","move","_error$response","_error$response$data","response","detail","_error$response2","_error$response2$data","handleAIMove","handleReset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCellClick","onAIMove","onReset","_c","$RefreshReg$"],"sources":["C:/Users/risha/PycharmProjects/hw9/myteekoai/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Board from './components/board';\nimport Controls from './components/controls';\nimport { getGameState, aiMove, opponentMove, resetGame } from './api';\n\nconst App = () => {\n    const [board, setBoard] = useState([]);\n    const [turn, setTurn] = useState('');\n    const [gameStatus, setGameStatus] = useState('');\n    const [selectedCell, setSelectedCell] = useState(null);\n\n    const fetchGameState = async () => {\n        try {\n            const data = await getGameState();\n            setBoard(data.board);\n            setTurn(data.turn || \"Opponent\");\n            setGameStatus(data.game_status);\n            setSelectedCell(null);\n            console.log('Fetched turn:', data.turn);\n        } catch (error) {\n            console.error('Error fetching game state:', error);\n            alert('Failed to fetch game state.');\n        }\n    };\n\n    useEffect(() => {\n        fetchGameState();\n    }, []);\n\n    const handleCellClick = async (row, col) => {\n        if (gameStatus === 'over') {\n            alert('Game is over.');\n            return;\n        }\n\n        if (turn !== 'Opponent') {\n            alert(\"It's AI's turn!\");\n            return;\n        }\n\n        const totalPieces = board.flat().filter(cell => cell !== '').length;\n        const dropPhase = totalPieces < 8;\n\n        if (dropPhase) {\n            const move = [[row, col]];\n            try {\n                console.log('Sending opponent drop move:', move);\n                const data = await opponentMove(move);\n                setBoard(data.board);\n                setGameStatus(data.game_status);\n                setTurn(data.turn);\n            } catch (error) {\n                console.error('Error with drop move:', error);\n                alert(error.response?.data?.detail || 'Invalid move.');\n            }\n        } else {\n            if (!selectedCell) {\n                setSelectedCell([row, col]);\n            } else {\n                const move = [selectedCell, [row, col]];\n                try {\n                    console.log('Sending opponent move:', move);\n                    const data = await opponentMove(move);\n                    setBoard(data.board);\n                    setGameStatus(data.game_status);\n                    setTurn(data.turn);\n                } catch (error) {\n                    console.error('Error with move:', error);\n                    alert(error.response?.data?.detail || 'Invalid move.');\n                } finally {\n                    setSelectedCell(null);\n                }\n            }\n        }\n    };\n\n    const handleAIMove = async () => {\n        if (gameStatus === 'over') {\n            alert('Game is over.');\n            return;\n        }\n\n        if (turn !== 'AI') {\n            alert(\"It's not AI's turn!\");\n            return;\n        }\n\n        try {\n            const data = await aiMove();\n            setBoard(data.board);\n            setGameStatus(data.game_status);\n            setTurn(data.turn);\n            console.log('Turn after AI move:', data.turn);\n        } catch (error) {\n            console.error('Error with AI move:', error);\n            alert('Failed to process AI move.');\n        }\n    };\n\n    const handleReset = async () => {\n        try {\n            await resetGame();\n            fetchGameState();\n        } catch (error) {\n            console.error('Error resetting game:', error);\n            alert('Failed to reset game.');\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Teeko Game</h1>\n            <h2>Turn: {turn ? turn : 'Loading...'}</h2>\n            <h3>Status: {gameStatus === 'over' ? 'Game Over' : 'In Progress'}</h3>\n            <Board board={board} onCellClick={handleCellClick}/>\n            <Controls onAIMove={handleAIMove} onReset={handleReset}/>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}