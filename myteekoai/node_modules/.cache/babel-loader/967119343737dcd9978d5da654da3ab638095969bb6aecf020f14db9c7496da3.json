{"ast":null,"code":"import React,{useEffect,useState}from'react';import Board from'./board';import Controls from'./controls';import{getGameState,aiMove,opponentMove,resetGame}from'../api';import{useNavigate}from'react-router-dom';// Import useNavigate\nimport'../App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Game=()=>{const[board,setBoard]=useState([]);const[turn,setTurn]=useState('');const[gameStatus,setGameStatus]=useState('');const[selectedCell,setSelectedCell]=useState(null);const[opponentPiece,setOpponentPiece]=useState('');const[winner,setWinner]=React.useState(null);// Null if no winner yet\nconst navigate=useNavigate();// Initialize navigate hook\nconst fetchGameState=async()=>{try{const data=await getGameState();console.log('Fetched game state:',data);setBoard(data.board);setTurn(data.turn);setGameStatus(data.game_status);setOpponentPiece(data.opponent_piece);setWinner(data.winner);setSelectedCell(null);}catch(error){alert('Failed to fetch game state.');}};useEffect(()=>{fetchGameState();},[]);const handleCellClick=async(row,col)=>{if(gameStatus==='over'){alert('Game is over.');return;}if(turn!=='Opponent'){alert(\"It's AI's turn!\");return;}// Calculate if it's the drop phase\nconst totalPieces=board.flat().filter(cell=>cell!==' '&&cell!=='').length;const dropPhase=totalPieces<8;if(dropPhase){// Handle drop phase: Single cell selection\nconst move=[[row,col]];try{const data=await opponentMove(move);setBoard(data.board);setGameStatus(data.game_status);setTurn(data.turn);setWinner(data.winner);}catch(error){var _error$response,_error$response$data;alert(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||'Invalid move.');}}else{// Handle move phase: Two cell selection\nif(!selectedCell){// Validate that the selected cell contains the opponent's piece\nif(board[row][col]!==opponentPiece){alert('You must select one of your pieces to move.');return;}setSelectedCell([row,col]);console.log('Selected Source Cell:',[row,col]);}else{const move=[[row,col],selectedCell];try{const data=await opponentMove(move);setBoard(data.board);setGameStatus(data.game_status);setTurn(data.turn);setWinner(data.winner);}catch(error){var _error$response2,_error$response2$data;alert(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.detail)||'Invalid move.');}finally{setSelectedCell(null);// Clear the selected cell\n}}}};const handleAIMove=async()=>{if(gameStatus==='over'){alert('Game is over.');return;}if(turn!=='AI'){alert(\"It's not AI's turn!\");return;}try{const data=await aiMove();setBoard(data.board);setGameStatus(data.game_status);setTurn(data.turn);setWinner(data.winner);}catch(error){alert('Failed to process AI move.');}};const handleReset=async()=>{try{await resetGame();navigate('/');// Redirect to the home page\n}catch(error){alert('Failed to reset game.');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"App-title\",children:\"Teeko Game\"}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"Turn: \",turn]}),gameStatus==='over'&&/*#__PURE__*/_jsx(\"h2\",{className:\"App-status\",children:winner==='AI'?'AI Wins!':winner==='Opponent'?'You Win!':'It\\'s a Draw!'}),/*#__PURE__*/_jsx(Board,{board:board,onCellClick:handleCellClick,dropPhase:board.flat().filter(cell=>cell!=='').length<8}),/*#__PURE__*/_jsx(Controls,{onAIMove:handleAIMove,onReset:handleReset})]});};export default Game;","map":{"version":3,"names":["React","useEffect","useState","Board","Controls","getGameState","aiMove","opponentMove","resetGame","useNavigate","jsx","_jsx","jsxs","_jsxs","Game","board","setBoard","turn","setTurn","gameStatus","setGameStatus","selectedCell","setSelectedCell","opponentPiece","setOpponentPiece","winner","setWinner","navigate","fetchGameState","data","console","log","game_status","opponent_piece","error","alert","handleCellClick","row","col","totalPieces","flat","filter","cell","length","dropPhase","move","_error$response","_error$response$data","response","detail","_error$response2","_error$response2$data","handleAIMove","handleReset","className","children","onCellClick","onAIMove","onReset"],"sources":["C:/Users/risha/PycharmProjects/hw9/myteekoai/src/components/Game.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Board from './board';\r\nimport Controls from './controls';\r\nimport { getGameState, aiMove, opponentMove, resetGame } from '../api';\r\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate\r\nimport '../App.css';\r\n\r\nconst Game = () => {\r\n    const [board, setBoard] = useState([]);\r\n    const [turn, setTurn] = useState('');\r\n    const [gameStatus, setGameStatus] = useState('');\r\n    const [selectedCell, setSelectedCell] = useState(null);\r\n    const [opponentPiece, setOpponentPiece] = useState('');\r\n    const [winner, setWinner] = React.useState(null); // Null if no winner yet\r\n    const navigate = useNavigate(); // Initialize navigate hook\r\n\r\n    const fetchGameState = async () => {\r\n        try {\r\n            const data = await getGameState();\r\n            console.log('Fetched game state:', data);\r\n            setBoard(data.board);\r\n            setTurn(data.turn);\r\n            setGameStatus(data.game_status);\r\n            setOpponentPiece(data.opponent_piece);\r\n            setWinner(data.winner);\r\n            setSelectedCell(null);\r\n        } catch (error) {\r\n            alert('Failed to fetch game state.');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchGameState();\r\n    }, []);\r\n\r\n    const handleCellClick = async (row, col) => {\r\n        if (gameStatus === 'over') {\r\n            alert('Game is over.');\r\n            return;\r\n        }\r\n\r\n        if (turn !== 'Opponent') {\r\n            alert(\"It's AI's turn!\");\r\n            return;\r\n        }\r\n\r\n        // Calculate if it's the drop phase\r\n        const totalPieces = board.flat().filter(cell => cell !== ' ' && cell !== '').length;\r\n        const dropPhase = totalPieces < 8;\r\n\r\n        if (dropPhase) {\r\n            // Handle drop phase: Single cell selection\r\n            const move = [[row, col]];\r\n\r\n            try {\r\n                const data = await opponentMove(move);\r\n                setBoard(data.board);\r\n                setGameStatus(data.game_status);\r\n                setTurn(data.turn);\r\n                setWinner(data.winner);\r\n            } catch (error) {\r\n                alert(error.response?.data?.detail || 'Invalid move.');\r\n            }\r\n        } else {\r\n            // Handle move phase: Two cell selection\r\n            if (!selectedCell) {\r\n                // Validate that the selected cell contains the opponent's piece\r\n                if (board[row][col] !== opponentPiece) {\r\n                    alert('You must select one of your pieces to move.');\r\n                    return;\r\n                }\r\n                setSelectedCell([row, col]);\r\n                console.log('Selected Source Cell:', [row, col]);\r\n            } else {\r\n                const move = [[row, col], selectedCell];\r\n\r\n                try {\r\n                    const data = await opponentMove(move);\r\n                    setBoard(data.board);\r\n                    setGameStatus(data.game_status);\r\n                    setTurn(data.turn);\r\n                    setWinner(data.winner);\r\n                } catch (error) {\r\n                    alert(error.response?.data?.detail || 'Invalid move.');\r\n                } finally {\r\n                    setSelectedCell(null); // Clear the selected cell\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAIMove = async () => {\r\n        if (gameStatus === 'over') {\r\n            alert('Game is over.');\r\n            return;\r\n        }\r\n\r\n        if (turn !== 'AI') {\r\n            alert(\"It's not AI's turn!\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const data = await aiMove();\r\n            setBoard(data.board);\r\n            setGameStatus(data.game_status);\r\n            setTurn(data.turn);\r\n            setWinner(data.winner);\r\n        } catch (error) {\r\n            alert('Failed to process AI move.');\r\n        }\r\n    };\r\n\r\n    const handleReset = async () => {\r\n        try {\r\n            await resetGame();\r\n            navigate('/'); // Redirect to the home page\r\n        } catch (error) {\r\n            alert('Failed to reset game.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1 className=\"App-title\">Teeko Game</h1>\r\n            <h2>Turn: {turn}</h2>\r\n            {gameStatus === 'over' && (\r\n                <h2 className=\"App-status\">\r\n                    {winner === 'AI'\r\n                        ? 'AI Wins!'\r\n                        : winner === 'Opponent'\r\n                            ? 'You Win!'\r\n                            : 'It\\'s a Draw!'}\r\n                </h2>\r\n            )}\r\n            <Board\r\n                board={board}\r\n                onCellClick={handleCellClick}\r\n                dropPhase={board.flat().filter(cell => cell !== '').length < 8}\r\n            />\r\n            <Controls onAIMove={handleAIMove} onReset={handleReset} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,MAAO,CAAAC,QAAQ,KAAM,YAAY,CACjC,OAASC,YAAY,CAAEC,MAAM,CAAEC,YAAY,CAAEC,SAAS,KAAQ,QAAQ,CACtE,OAASC,WAAW,KAAQ,kBAAkB,CAAE;AAChD,MAAO,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEpB,KAAM,CAAAC,IAAI,CAAGA,CAAA,GAAM,CACf,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACe,IAAI,CAAEC,OAAO,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CACpC,KAAM,CAACiB,UAAU,CAAEC,aAAa,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACmB,YAAY,CAAEC,eAAe,CAAC,CAAGpB,QAAQ,CAAC,IAAI,CAAC,CACtD,KAAM,CAACqB,aAAa,CAAEC,gBAAgB,CAAC,CAAGtB,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACuB,MAAM,CAAEC,SAAS,CAAC,CAAG1B,KAAK,CAACE,QAAQ,CAAC,IAAI,CAAC,CAAE;AAClD,KAAM,CAAAyB,QAAQ,CAAGlB,WAAW,CAAC,CAAC,CAAE;AAEhC,KAAM,CAAAmB,cAAc,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAxB,YAAY,CAAC,CAAC,CACjCyB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEF,IAAI,CAAC,CACxCb,QAAQ,CAACa,IAAI,CAACd,KAAK,CAAC,CACpBG,OAAO,CAACW,IAAI,CAACZ,IAAI,CAAC,CAClBG,aAAa,CAACS,IAAI,CAACG,WAAW,CAAC,CAC/BR,gBAAgB,CAACK,IAAI,CAACI,cAAc,CAAC,CACrCP,SAAS,CAACG,IAAI,CAACJ,MAAM,CAAC,CACtBH,eAAe,CAAC,IAAI,CAAC,CACzB,CAAE,MAAOY,KAAK,CAAE,CACZC,KAAK,CAAC,6BAA6B,CAAC,CACxC,CACJ,CAAC,CAEDlC,SAAS,CAAC,IAAM,CACZ2B,cAAc,CAAC,CAAC,CACpB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAQ,eAAe,CAAG,KAAAA,CAAOC,GAAG,CAAEC,GAAG,GAAK,CACxC,GAAInB,UAAU,GAAK,MAAM,CAAE,CACvBgB,KAAK,CAAC,eAAe,CAAC,CACtB,OACJ,CAEA,GAAIlB,IAAI,GAAK,UAAU,CAAE,CACrBkB,KAAK,CAAC,iBAAiB,CAAC,CACxB,OACJ,CAEA;AACA,KAAM,CAAAI,WAAW,CAAGxB,KAAK,CAACyB,IAAI,CAAC,CAAC,CAACC,MAAM,CAACC,IAAI,EAAIA,IAAI,GAAK,GAAG,EAAIA,IAAI,GAAK,EAAE,CAAC,CAACC,MAAM,CACnF,KAAM,CAAAC,SAAS,CAAGL,WAAW,CAAG,CAAC,CAEjC,GAAIK,SAAS,CAAE,CACX;AACA,KAAM,CAAAC,IAAI,CAAG,CAAC,CAACR,GAAG,CAAEC,GAAG,CAAC,CAAC,CAEzB,GAAI,CACA,KAAM,CAAAT,IAAI,CAAG,KAAM,CAAAtB,YAAY,CAACsC,IAAI,CAAC,CACrC7B,QAAQ,CAACa,IAAI,CAACd,KAAK,CAAC,CACpBK,aAAa,CAACS,IAAI,CAACG,WAAW,CAAC,CAC/Bd,OAAO,CAACW,IAAI,CAACZ,IAAI,CAAC,CAClBS,SAAS,CAACG,IAAI,CAACJ,MAAM,CAAC,CAC1B,CAAE,MAAOS,KAAK,CAAE,KAAAY,eAAA,CAAAC,oBAAA,CACZZ,KAAK,CAAC,EAAAW,eAAA,CAAAZ,KAAK,CAACc,QAAQ,UAAAF,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBjB,IAAI,UAAAkB,oBAAA,iBAApBA,oBAAA,CAAsBE,MAAM,GAAI,eAAe,CAAC,CAC1D,CACJ,CAAC,IAAM,CACH;AACA,GAAI,CAAC5B,YAAY,CAAE,CACf;AACA,GAAIN,KAAK,CAACsB,GAAG,CAAC,CAACC,GAAG,CAAC,GAAKf,aAAa,CAAE,CACnCY,KAAK,CAAC,6CAA6C,CAAC,CACpD,OACJ,CACAb,eAAe,CAAC,CAACe,GAAG,CAAEC,GAAG,CAAC,CAAC,CAC3BR,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAE,CAACM,GAAG,CAAEC,GAAG,CAAC,CAAC,CACpD,CAAC,IAAM,CACH,KAAM,CAAAO,IAAI,CAAG,CAAC,CAACR,GAAG,CAAEC,GAAG,CAAC,CAAEjB,YAAY,CAAC,CAEvC,GAAI,CACA,KAAM,CAAAQ,IAAI,CAAG,KAAM,CAAAtB,YAAY,CAACsC,IAAI,CAAC,CACrC7B,QAAQ,CAACa,IAAI,CAACd,KAAK,CAAC,CACpBK,aAAa,CAACS,IAAI,CAACG,WAAW,CAAC,CAC/Bd,OAAO,CAACW,IAAI,CAACZ,IAAI,CAAC,CAClBS,SAAS,CAACG,IAAI,CAACJ,MAAM,CAAC,CAC1B,CAAE,MAAOS,KAAK,CAAE,KAAAgB,gBAAA,CAAAC,qBAAA,CACZhB,KAAK,CAAC,EAAAe,gBAAA,CAAAhB,KAAK,CAACc,QAAQ,UAAAE,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBrB,IAAI,UAAAsB,qBAAA,iBAApBA,qBAAA,CAAsBF,MAAM,GAAI,eAAe,CAAC,CAC1D,CAAC,OAAS,CACN3B,eAAe,CAAC,IAAI,CAAC,CAAE;AAC3B,CACJ,CACJ,CACJ,CAAC,CAED,KAAM,CAAA8B,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAIjC,UAAU,GAAK,MAAM,CAAE,CACvBgB,KAAK,CAAC,eAAe,CAAC,CACtB,OACJ,CAEA,GAAIlB,IAAI,GAAK,IAAI,CAAE,CACfkB,KAAK,CAAC,qBAAqB,CAAC,CAC5B,OACJ,CAEA,GAAI,CACA,KAAM,CAAAN,IAAI,CAAG,KAAM,CAAAvB,MAAM,CAAC,CAAC,CAC3BU,QAAQ,CAACa,IAAI,CAACd,KAAK,CAAC,CACpBK,aAAa,CAACS,IAAI,CAACG,WAAW,CAAC,CAC/Bd,OAAO,CAACW,IAAI,CAACZ,IAAI,CAAC,CAClBS,SAAS,CAACG,IAAI,CAACJ,MAAM,CAAC,CAC1B,CAAE,MAAOS,KAAK,CAAE,CACZC,KAAK,CAAC,4BAA4B,CAAC,CACvC,CACJ,CAAC,CAED,KAAM,CAAAkB,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACA,KAAM,CAAA7C,SAAS,CAAC,CAAC,CACjBmB,QAAQ,CAAC,GAAG,CAAC,CAAE;AACnB,CAAE,MAAOO,KAAK,CAAE,CACZC,KAAK,CAAC,uBAAuB,CAAC,CAClC,CACJ,CAAC,CAED,mBACItB,KAAA,QAAKyC,SAAS,CAAC,KAAK,CAAAC,QAAA,eAChB5C,IAAA,OAAI2C,SAAS,CAAC,WAAW,CAAAC,QAAA,CAAC,YAAU,CAAI,CAAC,cACzC1C,KAAA,OAAA0C,QAAA,EAAI,QAAM,CAACtC,IAAI,EAAK,CAAC,CACpBE,UAAU,GAAK,MAAM,eAClBR,IAAA,OAAI2C,SAAS,CAAC,YAAY,CAAAC,QAAA,CACrB9B,MAAM,GAAK,IAAI,CACV,UAAU,CACVA,MAAM,GAAK,UAAU,CACjB,UAAU,CACV,eAAe,CACzB,CACP,cACDd,IAAA,CAACR,KAAK,EACFY,KAAK,CAAEA,KAAM,CACbyC,WAAW,CAAEpB,eAAgB,CAC7BQ,SAAS,CAAE7B,KAAK,CAACyB,IAAI,CAAC,CAAC,CAACC,MAAM,CAACC,IAAI,EAAIA,IAAI,GAAK,EAAE,CAAC,CAACC,MAAM,CAAG,CAAE,CAClE,CAAC,cACFhC,IAAA,CAACP,QAAQ,EAACqD,QAAQ,CAAEL,YAAa,CAACM,OAAO,CAAEL,WAAY,CAAE,CAAC,EACzD,CAAC,CAEd,CAAC,CAED,cAAe,CAAAvC,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}