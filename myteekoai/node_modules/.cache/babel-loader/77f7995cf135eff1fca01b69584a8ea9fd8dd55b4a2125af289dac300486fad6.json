{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\risha\\\\PycharmProjects\\\\hw9\\\\myteekoai\\\\src\\\\components\\\\Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Board from './board';\nimport Controls from './controls';\nimport { getGameState, aiMove, opponentMove, resetGame } from '../api';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState('');\n  const [gameStatus, setGameStatus] = useState('');\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [opponentPiece, setOpponentPiece] = useState('');\n  const [winner, setWinner] = React.useState(null); // Null if no winner yet\n\n  const fetchGameState = async () => {\n    try {\n      const data = await getGameState();\n      console.log('Fetched game state:', data);\n      setBoard(data.board);\n      setTurn(data.turn);\n      setGameStatus(data.game_status);\n      setOpponentPiece(data.opponent_piece);\n      setWinner(data.winner);\n      setSelectedCell(null);\n    } catch (error) {\n      alert('Failed to fetch game state.');\n    }\n  };\n  useEffect(() => {\n    fetchGameState();\n  }, []);\n  const handleCellClick = async (row, col) => {\n    if (gameStatus === 'over') {\n      alert('Game is over.');\n      return;\n    }\n    if (turn !== 'Opponent') {\n      alert(\"It's AI's turn!\");\n      return;\n    }\n\n    // Calculate if it's the drop phase\n    const totalPieces = board.flat().filter(cell => cell !== ' ' && cell !== '').length;\n    const dropPhase = totalPieces < 8;\n    if (dropPhase) {\n      // Handle drop phase: Single cell selection\n      const move = [[row, col]];\n      try {\n        const data = await opponentMove(move);\n        setBoard(data.board);\n        setGameStatus(data.game_status);\n        setTurn(data.turn);\n        setWinner(data.winner);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Invalid move.');\n      }\n    } else {\n      // Handle move phase: Two cell selection\n      if (!selectedCell) {\n        // Validate that the selected cell contains the opponent's piece\n        if (board[row][col] !== opponentPiece) {\n          alert('You must select one of your pieces to move.');\n          return;\n        }\n        setSelectedCell([row, col]);\n        console.log('Selected Source Cell:', [row, col]);\n      } else {\n        const move = [[row, col], selectedCell];\n        try {\n          const data = await opponentMove(move);\n          setBoard(data.board);\n          setGameStatus(data.game_status);\n          setTurn(data.turn);\n          setWinner(data.winner);\n        } catch (error) {\n          var _error$response2, _error$response2$data;\n          alert(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Invalid move.');\n        } finally {\n          setSelectedCell(null); // Clear the selected cell\n        }\n      }\n    }\n  };\n  const handleAIMove = async () => {\n    if (gameStatus === 'over') {\n      alert('Game is over.');\n      return;\n    }\n    if (turn !== 'AI') {\n      alert(\"It's not AI's turn!\");\n      return;\n    }\n    try {\n      const data = await aiMove();\n      setBoard(data.board);\n      setGameStatus(data.game_status);\n      setTurn(data.turn);\n      setWinner(data.winner);\n    } catch (error) {\n      alert('Failed to process AI move.');\n    }\n  };\n  const handleReset = async () => {\n    try {\n      await resetGame();\n      fetchGameState();\n      setWinner(null);\n    } catch (error) {\n      alert('Failed to reset game.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"App-title\",\n      children: \"Teeko Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Turn: \", turn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), gameStatus === 'over' && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"App-status\",\n      children: winner === 'AI' ? 'AI Wins!' : winner === 'Opponent' ? 'You Win!' : 'It\\'s a Draw!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      onCellClick: handleCellClick,\n      dropPhase: board.flat().filter(cell => cell !== '').length < 8\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      onAIMove: handleAIMove,\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"zdLdVGHtj7R9/ZU3VIoJPc4H7SE=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","Board","Controls","getGameState","aiMove","opponentMove","resetGame","jsxDEV","_jsxDEV","Game","_s","board","setBoard","turn","setTurn","gameStatus","setGameStatus","selectedCell","setSelectedCell","opponentPiece","setOpponentPiece","winner","setWinner","fetchGameState","data","console","log","game_status","opponent_piece","error","alert","handleCellClick","row","col","totalPieces","flat","filter","cell","length","dropPhase","move","_error$response","_error$response$data","response","detail","_error$response2","_error$response2$data","handleAIMove","handleReset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCellClick","onAIMove","onReset","_c","$RefreshReg$"],"sources":["C:/Users/risha/PycharmProjects/hw9/myteekoai/src/components/Game.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Board from './board';\r\nimport Controls from './controls';\r\nimport {getGameState, aiMove, opponentMove, resetGame} from '../api';\r\nimport '../App.css'\r\n\r\nconst Game = () => {\r\n    const [board, setBoard] = useState([]);\r\n    const [turn, setTurn] = useState('');\r\n    const [gameStatus, setGameStatus] = useState('');\r\n    const [selectedCell, setSelectedCell] = useState(null);\r\n    const [opponentPiece, setOpponentPiece] = useState('');\r\n    const [winner, setWinner] = React.useState(null); // Null if no winner yet\r\n\r\n\r\n    const fetchGameState = async () => {\r\n        try {\r\n            const data = await getGameState();\r\n            console.log('Fetched game state:', data);\r\n            setBoard(data.board);\r\n            setTurn(data.turn);\r\n            setGameStatus(data.game_status);\r\n            setOpponentPiece(data.opponent_piece);\r\n            setWinner(data.winner);\r\n            setSelectedCell(null);\r\n        } catch (error) {\r\n            alert('Failed to fetch game state.');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchGameState();\r\n    }, []);\r\n\r\n    const handleCellClick = async (row, col) => {\r\n        if (gameStatus === 'over') {\r\n            alert('Game is over.');\r\n            return;\r\n        }\r\n\r\n        if (turn !== 'Opponent') {\r\n            alert(\"It's AI's turn!\");\r\n            return;\r\n        }\r\n\r\n        // Calculate if it's the drop phase\r\n        const totalPieces = board.flat().filter(cell => cell !== ' ' && cell !== '').length;\r\n        const dropPhase = totalPieces < 8;\r\n\r\n        if (dropPhase) {\r\n            // Handle drop phase: Single cell selection\r\n            const move = [[row, col]];\r\n\r\n            try {\r\n                const data = await opponentMove(move);\r\n                setBoard(data.board);\r\n                setGameStatus(data.game_status);\r\n                setTurn(data.turn);\r\n                setWinner(data.winner);\r\n            } catch (error) {\r\n                alert(error.response?.data?.detail || 'Invalid move.');\r\n            }\r\n        } else {\r\n            // Handle move phase: Two cell selection\r\n            if (!selectedCell) {\r\n                // Validate that the selected cell contains the opponent's piece\r\n                if (board[row][col] !== opponentPiece) {\r\n                    alert('You must select one of your pieces to move.');\r\n                    return;\r\n                }\r\n                setSelectedCell([row, col]);\r\n                console.log('Selected Source Cell:', [row, col]);\r\n            } else {\r\n                const move = [[row, col], selectedCell];\r\n\r\n                try {\r\n                    const data = await opponentMove(move);\r\n                    setBoard(data.board);\r\n                    setGameStatus(data.game_status);\r\n                    setTurn(data.turn);\r\n                    setWinner(data.winner);\r\n                } catch (error) {\r\n                    alert(error.response?.data?.detail || 'Invalid move.');\r\n                } finally {\r\n                    setSelectedCell(null); // Clear the selected cell\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAIMove = async () => {\r\n        if (gameStatus === 'over') {\r\n            alert('Game is over.');\r\n            return;\r\n        }\r\n\r\n        if (turn !== 'AI') {\r\n            alert(\"It's not AI's turn!\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const data = await aiMove();\r\n            setBoard(data.board);\r\n            setGameStatus(data.game_status);\r\n            setTurn(data.turn);\r\n            setWinner(data.winner);\r\n        } catch (error) {\r\n            alert('Failed to process AI move.');\r\n        }\r\n    };\r\n\r\n    const handleReset = async () => {\r\n        try {\r\n            await resetGame();\r\n            fetchGameState();\r\n            setWinner(null);\r\n        } catch (error) {\r\n            alert('Failed to reset game.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1 className=\"App-title\">Teeko Game</h1>\r\n            <h2>Turn: {turn}</h2>\r\n            {gameStatus === 'over' && (\r\n                <h2 className=\"App-status\">\r\n                    {winner === 'AI'\r\n                        ? 'AI Wins!'\r\n                        : winner === 'Opponent'\r\n                            ? 'You Win!'\r\n                            : 'It\\'s a Draw!'}\r\n                </h2>\r\n            )}\r\n            <Board\r\n                board={board}\r\n                onCellClick={handleCellClick}\r\n                dropPhase={board.flat().filter(cell => cell !== '').length < 8}\r\n            />\r\n            <Controls onAIMove={handleAIMove} onReset={handleReset}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}