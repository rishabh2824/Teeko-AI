{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_BACKEND_URL||'http://127.0.0.1:8000';// Default to localhost\nconst axiosInstance=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'},timeout:30000// 10 seconds timeout\n});// Handle API errors\nconst handleApiError=error=>{var _error$response,_error$response$data;const errorMessage=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||'An error occurred while communicating with the server.';return new Error(errorMessage);};// API Methods\nexport const getGameState=async()=>{try{const response=await axiosInstance.get('/');return response.data;}catch(error){throw handleApiError(error);}};export const aiMove=async()=>{try{const response=await axiosInstance.post('/ai-move/');return response.data;}catch(error){throw handleApiError(error);}};export const opponentMove=async move=>{try{const response=await axiosInstance.post('/opponent-move/',{move});return response.data;}catch(error){throw handleApiError(error);}};export const resetGame=async()=>{try{const response=await axiosInstance.post('/reset/');return response.data;}catch(error){throw handleApiError(error);}};export const setDifficulty=async difficulty=>{try{console.log(\"The difficulty is \"+difficulty);const response=await axiosInstance.post('/set-difficulty/',{difficulty});console.log(\"response from backend \"+JSON.stringify(response.data,null,2));return response.data;}catch(error){throw handleApiError(error);}};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_BACKEND_URL","axiosInstance","create","baseURL","headers","timeout","handleApiError","error","_error$response","_error$response$data","errorMessage","response","data","detail","Error","getGameState","get","aiMove","post","opponentMove","move","resetGame","setDifficulty","difficulty","console","log","JSON","stringify"],"sources":["C:/Users/risha/PycharmProjects/hw9/myteekoai/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_BACKEND_URL || 'http://127.0.0.1:8000'; // Default to localhost\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    timeout: 30000, // 10 seconds timeout\r\n});\r\n\r\n// Handle API errors\r\nconst handleApiError = (error) => {\r\n    const errorMessage = error.response?.data?.detail || 'An error occurred while communicating with the server.';\r\n    return new Error(errorMessage);\r\n};\r\n\r\n// API Methods\r\nexport const getGameState = async () => {\r\n    try {\r\n        const response = await axiosInstance.get('/');\r\n        return response.data;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const aiMove = async () => {\r\n    try {\r\n        const response = await axiosInstance.post('/ai-move/');\r\n        return response.data;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const opponentMove = async (move) => {\r\n    try {\r\n        const response = await axiosInstance.post('/opponent-move/', { move });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const resetGame = async () => {\r\n    try {\r\n        const response = await axiosInstance.post('/reset/');\r\n        return response.data;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const setDifficulty = async (difficulty) => {\r\n    try {\r\n        console.log(\"The difficulty is \" + difficulty);\r\n        const response = await axiosInstance.post('/set-difficulty/', { difficulty });\r\n        console.log(\"response from backend \" + JSON.stringify(response.data, null, 2));\r\n        return response.data;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,EAAI,uBAAuB,CAAE;AAE9E,KAAM,CAAAC,aAAa,CAAGL,KAAK,CAACM,MAAM,CAAC,CAC/BC,OAAO,CAAEN,OAAO,CAChBO,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,OAAO,CAAE,KAAO;AACpB,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,cAAc,CAAIC,KAAK,EAAK,KAAAC,eAAA,CAAAC,oBAAA,CAC9B,KAAM,CAAAC,YAAY,CAAG,EAAAF,eAAA,CAAAD,KAAK,CAACI,QAAQ,UAAAH,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBI,IAAI,UAAAH,oBAAA,iBAApBA,oBAAA,CAAsBI,MAAM,GAAI,wDAAwD,CAC7G,MAAO,IAAI,CAAAC,KAAK,CAACJ,YAAY,CAAC,CAClC,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,YAAY,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACA,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAV,aAAa,CAACe,GAAG,CAAC,GAAG,CAAC,CAC7C,MAAO,CAAAL,QAAQ,CAACC,IAAI,CACxB,CAAE,MAAOL,KAAK,CAAE,CACZ,KAAM,CAAAD,cAAc,CAACC,KAAK,CAAC,CAC/B,CACJ,CAAC,CAED,MAAO,MAAM,CAAAU,MAAM,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAI,CACA,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAV,aAAa,CAACiB,IAAI,CAAC,WAAW,CAAC,CACtD,MAAO,CAAAP,QAAQ,CAACC,IAAI,CACxB,CAAE,MAAOL,KAAK,CAAE,CACZ,KAAM,CAAAD,cAAc,CAACC,KAAK,CAAC,CAC/B,CACJ,CAAC,CAED,MAAO,MAAM,CAAAY,YAAY,CAAG,KAAO,CAAAC,IAAI,EAAK,CACxC,GAAI,CACA,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAV,aAAa,CAACiB,IAAI,CAAC,iBAAiB,CAAE,CAAEE,IAAK,CAAC,CAAC,CACtE,MAAO,CAAAT,QAAQ,CAACC,IAAI,CACxB,CAAE,MAAOL,KAAK,CAAE,CACZ,KAAM,CAAAD,cAAc,CAACC,KAAK,CAAC,CAC/B,CACJ,CAAC,CAED,MAAO,MAAM,CAAAc,SAAS,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAI,CACA,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAV,aAAa,CAACiB,IAAI,CAAC,SAAS,CAAC,CACpD,MAAO,CAAAP,QAAQ,CAACC,IAAI,CACxB,CAAE,MAAOL,KAAK,CAAE,CACZ,KAAM,CAAAD,cAAc,CAACC,KAAK,CAAC,CAC/B,CACJ,CAAC,CAED,MAAO,MAAM,CAAAe,aAAa,CAAG,KAAO,CAAAC,UAAU,EAAK,CAC/C,GAAI,CACAC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAGF,UAAU,CAAC,CAC9C,KAAM,CAAAZ,QAAQ,CAAG,KAAM,CAAAV,aAAa,CAACiB,IAAI,CAAC,kBAAkB,CAAE,CAAEK,UAAW,CAAC,CAAC,CAC7EC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAGC,IAAI,CAACC,SAAS,CAAChB,QAAQ,CAACC,IAAI,CAAE,IAAI,CAAE,CAAC,CAAC,CAAC,CAC9E,MAAO,CAAAD,QAAQ,CAACC,IAAI,CACxB,CAAE,MAAOL,KAAK,CAAE,CACZ,KAAM,CAAAD,cAAc,CAACC,KAAK,CAAC,CAC/B,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}